"use client";
import { useEffect, useState } from 'react';
import { setup2fa, verify2fa } from '../../apiCalls/authentication';
import { getToken } from '@/lib/localStorageUtils';
import { QRCode } from 'react-qrcode-logo';

export default function Setup2FA() {
	const [username, setUsername] = useState('');
  const [qrUrl, setQrUrl] = useState('');
  const [secret, setSecret] = useState('');
  const [code, setCode] = useState('');
  const [message, setMessage] = useState('');

	function getCurrentUserFromJWT() {
		const token = getToken();
		if (!token) {
			return "not logged in";
		}
		try {
			const payload = JSON.parse(atob(token.split('.')[1]));
			console.log("Decoded JWT payload:", payload);
			return payload.sub || "unknown user";
		} catch (error) {
			console.error("Error decoding JWT:", error);
			return "invalid token";
		}
	}

	useEffect(() => {
		const user = getCurrentUserFromJWT();
		if (user && user !== "not logged in" && user !== "invalid token") {
			setUsername(user as string);
		} else {
			setUsername('not logged in');
		}
	}, [getCurrentUserFromJWT()]);

  async function handleSetup() {
    const data = await setup2fa(username);
    setQrUrl(data.qrUrl);
    setSecret(data.secret);
  }

  useEffect(() => {
    handleSetup();
  }, [username]);

  async function handleVerify() {
    await verify2fa(username, code)
      .then((data) => {
        setMessage("2FA setup successful!");
        localStorage.setItem('token', data.token); // Store the new token
        window.location.href = '/'; // Redirect to home
      })
      .catch((error) => {
        setMessage("Error verifying 2FA: " + error.message);
      });
  }

  return (
    <div className="flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-sm">
        <h2 className="mt-10 text-center text-2xl/9 font-bold tracking-tight text-gray-300">
          Setup Two-Factor Authentication
        </h2>
      </div>
      <div className="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
      </div>
      <p className="text-center text-sm text-gray-500">
        Please scan the QR code below with your Google Authenticator app to set up Two-Factor Authentication.
      </p>
      

      {qrUrl && (
        <>
          <div className="flex justify-center mt-6">
            <QRCode value={qrUrl} size={200} />
          </div>
          
          {/* <p>Or manually enter secret: {secret}</p> */}
          <p className="text-center text-sm text-gray-500 mt-2">
            Secret: <strong>{secret}</strong>
          </p>
          <p className="text-center text-sm text-gray-500 mt-2">
            After scanning the QR code, enter the 6-digit code generated by your authenticator app below.
          </p>
          <div className="flex flex-col items-center mt-6">
            <input
              placeholder="Enter 6-digit code"
              value={code}
              onChange={e => setCode(e.target.value)}
              className="block w-100 rounded-md bg-gray-900 px-3 py-1.5 text-base text-gray-300 outline-1 -outline-offset-1 outline-gray-600 placeholder:text-gray-600 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm/6"
              type="text"
              required
              maxLength={6}
              pattern="\d{6}"
            />
            <button 
              onClick={handleVerify}
              className="mt-4 flex w-100 justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-base font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:text-sm/6"
            >
              Verify
            </button>
            <p>{message}</p>
          </div>
          
          
        </>
      )}
    </div>
  );
}